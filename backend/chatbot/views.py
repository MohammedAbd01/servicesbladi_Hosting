from django.shortcuts import render
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
from django.utils.decorators import method_decorator
from django.views import View
from django.contrib.auth.decorators import login_required
from django.db.models import Q, Count, Avg, Sum
from django.utils import timezone
from django.core.paginator import Paginator
import json
import uuid
import time
import requests
from datetime import datetime, timedelta

from .models import ChatSession, ChatMessage, ChatFeedback, ChatAnalytics, ChatbotConfiguration


class ChatbotView(View):
    """Vue principale pour l'interface du chatbot"""
    
    def get(self, request):
        """Afficher l'interface chatbot"""
        context = {
            'user_is_client': request.user.is_authenticated,
            'show_chatbot': True,
        }
        return render(request, 'chatbot/chatbot.html', context)


@method_decorator(csrf_exempt, name='dispatch')
class ChatAPIView(View):
    """API pour les interactions du chatbot"""
    
    def post(self, request):
        """Traiter un message utilisateur"""
        try:
            data = json.loads(request.body)
            user_message = data.get('message', '').strip()
            session_id = data.get('session_id')
            
            if not user_message:
                return JsonResponse({'error': 'Message requis'}, status=400)
            
            # Cr√©er ou r√©cup√©rer la session
            session = self.get_or_create_session(request, session_id)
            
            # Enregistrer le message utilisateur
            user_msg = ChatMessage.objects.create(
                session=session,
                message_type='user',
                content=user_message,
                domain_category=self.classify_domain(user_message)
            )
            
            # G√©n√©rer la r√©ponse du bot
            start_time = time.time()
            bot_response = self.generate_bot_response(user_message, session)
            response_time = int((time.time() - start_time) * 1000)
            
            # Enregistrer la r√©ponse du bot
            bot_msg = ChatMessage.objects.create(
                session=session,
                message_type='bot',
                content=bot_response,
                response_time_ms=response_time,
                domain_category=user_msg.domain_category
            )
            
            # Mettre √† jour les analytics
            self.update_analytics(user_msg.domain_category)
            
            return JsonResponse({
                'response': bot_response,
                'session_id': session.session_id,
                'message_id': bot_msg.id,
                'response_time': response_time
            })
            
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    
    def get_or_create_session(self, request, session_id=None):
        """Cr√©er ou r√©cup√©rer une session de chat"""
        if session_id:
            try:
                session = ChatSession.objects.get(session_id=session_id, is_active=True)
                session.updated_at = timezone.now()
                session.save()
                return session
            except ChatSession.DoesNotExist:
                pass
        
        # Cr√©er une nouvelle session
        session = ChatSession.objects.create(
            user=request.user if request.user.is_authenticated else None,
            session_id=str(uuid.uuid4()),
            user_agent=request.META.get('HTTP_USER_AGENT', ''),
            ip_address=self.get_client_ip(request)        )
        return session
    
    def get_client_ip(self, request):
        """R√©cup√©rer l'IP du client"""
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip
    
    def classify_domain(self, message):
        """Classifier le domaine de la question"""
        message_lower = message.lower()
        
        # Mots-cl√©s par domaine
        keywords = {
            'fiscalite': ['imp√¥t', 'taxe', 'd√©claration', 'fiscal', 'tva', 'ir', 'is', 'convention'],
            'immobilier': ['maison', 'appartement', 'terrain', 'achat', 'vente', 'location', 'immobilier'],
            'investissement': ['investir', 'placement', 'bourse', 'opcvm', 'action', 'obligation', 'projet'],
            'administration': ['consulat', 'passeport', 'visa', '√©tat civil', 'document', 'carte'],
            'formation': ['formation', 'dipl√¥me', 'certification', 'cours', 'apprentissage', 'm√©tier']
        }
        
        for domain, words in keywords.items():
            if any(word in message_lower for word in words):
                return domain
        
        return 'other'
    
    def generate_bot_response(self, user_message, session):
        """G√©n√©rer une r√©ponse du bot via l'API Gemini"""
        try:
            # R√©cup√©rer la cl√© API et le mod√®le depuis la configuration
            api_key = ChatbotConfiguration.get_value('gemini_api_key', '')
            model = ChatbotConfiguration.get_value('gemini_model', 'gemini-pro')
            
            if not api_key:
                print("Erreur: Cl√© API Gemini manquante")
                return self.get_fallback_response()
            
            # V√©rifier si la question est similaire aux questions pr√©c√©dentes
            if self.is_question_repeated(user_message, session):
                return """üá≤üá¶ Je remarque que vous avez pos√© une question similaire. 

Pour vous aider au mieux, pourriez-vous :
‚Ä¢ Pr√©ciser votre question
‚Ä¢ Donner plus de d√©tails sur votre situation
‚Ä¢ Me dire si ma r√©ponse pr√©c√©dente n'√©tait pas claire

Je suis l√† pour vous aider avec pr√©cision !"""
            
            # R√©cup√©rer l'historique des messages r√©cents (limit√© √† 3 pour √©viter la confusion)
            recent_messages = ChatMessage.objects.filter(
                session=session
            ).order_by('-created_at')[:3]
            
            # Construire l'historique de conversation avec un format plus strict
            conversation_history = []
            
            # Ajouter le message syst√®me en premier
            system_prompt = self.get_system_prompt(session.user)
            conversation_history.append({
                "role": "system",
                "parts": [{"text": system_prompt}]
            })
            
            # Ajouter l'historique des messages
            for msg in reversed(recent_messages):
                role = "user" if msg.message_type == "user" else "assistant"
                # Ajouter un pr√©fixe pour diff√©rencier les messages
                prefix = "Question: " if role == "user" else "R√©ponse: "
                conversation_history.append({
                    "role": role,
                    "parts": [{"text": f"{prefix}{msg.content}"}]
                })
            
            # Ajouter le message actuel
            conversation_history.append({
                "role": "user",
                "parts": [{"text": f"Question: {user_message}"}]
            })
            
            # Pr√©parer la requ√™te pour Gemini avec des param√®tres plus stricts
            url = f"https://generativelanguage.googleapis.com/v1beta/models/{model}:generateContent?key={api_key}"
            
            payload = {
                "contents": conversation_history,
                "generationConfig": {
                    "temperature": 0.7,  # R√©duit pour plus de coh√©rence
                    "topK": 20,  # R√©duit pour plus de pr√©cision
                    "topP": 0.8,  # R√©duit pour √©viter les r√©p√©titions
                    "maxOutputTokens": 800,  # R√©duit pour des r√©ponses plus concises
                    "stopSequences": ["Question:", "R√©ponse:", "User:", "Assistant:"]
                },
                "safetySettings": [
                    {
                        "category": "HARM_CATEGORY_HARASSMENT",
                        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                    },
                    {
                        "category": "HARM_CATEGORY_HATE_SPEECH",
                        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                    },
                    {
                        "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                    },
                    {
                        "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                        "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                    }
                ]
            }
            
            # Faire la requ√™te avec un timeout plus court
            response = requests.post(url, json=payload, timeout=15)
            response.raise_for_status()
            
            data = response.json()
            
            if 'candidates' in data and data['candidates']:
                bot_response = data['candidates'][0]['content']['parts'][0]['text']
                
                # Nettoyer la r√©ponse (enlever les pr√©fixes potentiels)
                bot_response = bot_response.replace("R√©ponse:", "").strip()
                
                # V√©rifications suppl√©mentaires
                if (self.is_response_repetitive(bot_response, session) or 
                    len(bot_response) < 20 or  # R√©ponse trop courte
                    len(bot_response) > 1000):  # R√©ponse trop longue
                    return self.get_fallback_response()
                
                return bot_response
            else:
                print("Erreur: Pas de r√©ponse valide de l'API Gemini")
                return self.get_fallback_response()
                
        except requests.exceptions.RequestException as e:
            print(f"Erreur de requ√™te API Gemini: {e}")
            return self.get_fallback_response()
        except Exception as e:
            print(f"Erreur inattendue: {e}")
            return self.get_fallback_response()
    
    def is_question_repeated(self, question, session):
        """V√©rifier si la question est similaire aux questions pr√©c√©dentes"""
        recent_questions = ChatMessage.objects.filter(
            session=session,
            message_type='user'
        ).order_by('-created_at')[:3]  # Derni√®res 3 questions
        
        for msg in recent_questions:
            if self.calculate_similarity(question, msg.content) > 0.7:  # Seuil plus bas pour les questions
                return True
        return False
    
    def is_response_repetitive(self, response, session):
        """V√©rifier si la r√©ponse est trop similaire aux messages pr√©c√©dents"""
        recent_bot_messages = ChatMessage.objects.filter(
            session=session,
            message_type='bot'
        ).order_by('-created_at')[:3]
        
        # V√©rifications multiples
        for msg in recent_bot_messages:
            # V√©rifier la similarit√© globale
            if self.calculate_similarity(response, msg.content) > 0.6:  # Seuil plus strict
                return True
            
            # V√©rifier les phrases identiques
            response_sentences = set(s.strip() for s in response.split('.') if len(s.strip()) > 20)
            msg_sentences = set(s.strip() for s in msg.content.split('.') if len(s.strip()) > 20)
            
            if response_sentences.intersection(msg_sentences):
                return True
        
        return False
    
    def calculate_similarity(self, text1, text2):
        """Calculer la similarit√© entre deux textes (m√©thode simple)"""
        # Convertir en minuscules et en ensembles de mots
        words1 = set(text1.lower().split())
        words2 = set(text2.lower().split())
        
        # Calculer le coefficient de Jaccard
        intersection = len(words1.intersection(words2))
        union = len(words1.union(words2))
        
        return intersection / union if union > 0 else 0
    
    def get_system_prompt(self, user):
        """Construire le prompt syst√®me personnalis√©"""
        client_status = "client inscrit" if user and user.is_authenticated else "nouveau visiteur"
        
        return f"""Tu es un expert des services aux Marocains R√©sidant √† l'√âtranger (MRE). 

DOMAINES D'EXPERTISE EXCLUSIFS:
- üìä Fiscalit√© (imp√¥ts, d√©clarations, conventions fiscales)
- üè† Immobilier au Maroc (achat, vente, investissement)
- üí∞ Investissements (OPCVM, bourse, projets)
- üìã Administration (documents, visas, consulats)
- üéì Formation professionnelle (certifications, reconversion)

INSTRUCTIONS STRICTES:
1. R√©ponds UNIQUEMENT aux questions li√©es √† ces 5 domaines
2. Si la question est hors sujet, r√©ponds poliment que tu ne peux traiter que les sujets MRE
3. Si tu ne peux pas r√©pondre pr√©cis√©ment, propose une assistance personnalis√©e
4. L'utilisateur est actuellement: {client_status}

LOGIQUE CONDITIONNELLE:
- Si nouveau visiteur ‚Üí propose inscription sur la plateforme
- Si client inscrit ‚Üí propose de remplir une demande de service

STYLE DE R√âPONSE:
- Utilise le drapeau üá≤üá¶ dans tes messages
- Reste professionnel mais chaleureux
- Sois concis et pr√©cis
- Utilise des puces pour organiser l'information
- Propose toujours une action concr√®te

R√©ponds en fran√ßais uniquement."""
    
    def get_fallback_response(self):
        """R√©ponse de secours en cas d'erreur"""
        return """üá≤üá¶ Je rencontre une difficult√© technique temporaire. 

En attendant, je peux vous orienter vers nos ressources :

‚Ä¢ üìä Questions fiscales ‚Üí Consultez notre guide fiscal MRE
‚Ä¢ üè† Immobilier ‚Üí D√©couvrez nos opportunit√©s d'investissement
‚Ä¢ üí∞ Placements ‚Üí Explorez nos solutions d'√©pargne
‚Ä¢ üìã Administration ‚Üí Trouvez les formulaires consulaires
‚Ä¢ üéì Formation ‚Üí Parcourez notre catalogue de formations

üí° Pour une assistance personnalis√©e imm√©diate, n'h√©sitez pas √† vous inscrire sur notre plateforme ou √† contacter directement nos experts."""
    
    def update_analytics(self, domain_category):
        """Mettre √† jour les analytics quotidiennes"""
        today = timezone.now().date()
        analytics, created = ChatAnalytics.objects.get_or_create(date=today)
        
        analytics.total_messages += 1
        
        # Incr√©menter le compteur de domaine
        if domain_category == 'fiscalite':
            analytics.fiscalite_questions += 1
        elif domain_category == 'immobilier':
            analytics.immobilier_questions += 1
        elif domain_category == 'investissement':
            analytics.investissement_questions += 1
        elif domain_category == 'administration':
            analytics.administration_questions += 1
        elif domain_category == 'formation':
            analytics.formation_questions += 1
        else:
            analytics.off_topic_questions += 1
        
        analytics.save()


@method_decorator(csrf_exempt, name='dispatch')
class ChatFeedbackView(View):
    """Vue pour enregistrer le feedback utilisateur"""
    
    def post(self, request):
        """Enregistrer un feedback"""
        try:
            data = json.loads(request.body)
            message_id = data.get('message_id')
            feedback_type = data.get('feedback_type')
            comment = data.get('comment', '')
            
            if not message_id or not feedback_type:
                return JsonResponse({'error': 'message_id et feedback_type requis'}, status=400)
            
            message = ChatMessage.objects.get(id=message_id)
            
            feedback = ChatFeedback.objects.create(
                message=message,
                feedback_type=feedback_type,
                comment=comment,
                ip_address=self.get_client_ip(request)
            )
            
            return JsonResponse({'status': 'success', 'feedback_id': feedback.id})
            
        except ChatMessage.DoesNotExist:
            return JsonResponse({'error': 'Message non trouv√©'}, status=404)
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    
    def get_client_ip(self, request):
        """R√©cup√©rer l'IP du client"""
        x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if x_forwarded_for:
            ip = x_forwarded_for.split(',')[0]
        else:
            ip = request.META.get('REMOTE_ADDR')
        return ip


@login_required
def chat_history(request):
    """Historique des conversations pour l'utilisateur connect√©"""
    sessions = ChatSession.objects.filter(user=request.user).order_by('-created_at')
    
    paginator = Paginator(sessions, 10)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'sessions': page_obj,
        'total_sessions': sessions.count()
    }
    return render(request, 'chatbot/history.html', context)


@login_required 
def chat_analytics(request):
    """Tableau de bord analytics pour les admins"""
    if not request.user.is_staff:
        return JsonResponse({'error': 'Acc√®s non autoris√©'}, status=403)
    
    # Analytics des 30 derniers jours
    end_date = timezone.now().date()
    start_date = end_date - timedelta(days=30)
    
    analytics = ChatAnalytics.objects.filter(
        date__range=[start_date, end_date]
    ).order_by('-date')
      # Agr√©gations
    total_stats = analytics.aggregate(
        total_sessions=Sum('total_sessions'),
        total_messages=Sum('total_messages'),
        avg_response_time=Avg('avg_response_time_ms'),
        avg_satisfaction=Avg('satisfaction_avg')
    )
    
    # Top domaines
    domain_stats = {
        'fiscalite': analytics.aggregate(Sum('fiscalite_questions'))['fiscalite_questions__sum'] or 0,
        'immobilier': analytics.aggregate(Sum('immobilier_questions'))['immobilier_questions__sum'] or 0,
        'investissement': analytics.aggregate(Sum('investissement_questions'))['investissement_questions__sum'] or 0,
        'administration': analytics.aggregate(Sum('administration_questions'))['administration_questions__sum'] or 0,
        'formation': analytics.aggregate(Sum('formation_questions'))['formation_questions__sum'] or 0,
        'off_topic': analytics.aggregate(Sum('off_topic_questions'))['off_topic_questions__sum'] or 0,
    }
    
    context = {
        'analytics': analytics,
        'total_stats': total_stats,
        'domain_stats': domain_stats,
        'date_range': f"{start_date} - {end_date}"
    }
    
    return render(request, 'chatbot/analytics.html', context)
